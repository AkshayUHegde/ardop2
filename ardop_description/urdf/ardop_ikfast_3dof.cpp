/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-04-24 05:11:36.288502
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKsin(j[1]);
x1=IKcos(j[1]);
x2=IKsin(j[0]);
x3=IKcos(j[0]);
x4=((0.103985628770161)*x1);
x5=((0.00366055)*x0);
eetrans[0]=((-0.00108)+(((-0.103985628770161)*x0))+(((0.00366055)*x1)));
eetrans[1]=((-0.25288)+((x2*x5))+((x2*x4))+(((-0.0044)*x2))+(((-0.07596)*x3)));
IkReal x6=((1.0)*x3);
eetrans[2]=((0.504)+(((0.0044)*x3))+(((-1.0)*x5*x6))+(((-1.0)*x4*x6))+(((-0.07596)*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((0.504)+(((-1.0)*pz)));
new_py=((0.25288)+py);
new_pz=((0.00108)+px);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal verifyeval[1];
verifyeval[0]=((1.0)+(((-60.2543062342291)*(pz*pz)))+(((-60.2543062342291)*(py*py)))+(((-60.2543062342291)*(px*px))));
if( IKabs(verifyeval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x7=py*py;
IkReal x8=px*px;
IkReal x9=pz*pz;
IkReal x10=((31250000.0)*py);
IkReal x11=((31250000.0)*px);
j0eval[0]=(x7+x8);
j0eval[1]=IKsign(((((275000.0)*x8))+(((275000.0)*x7))));
j0eval[2]=((IKabs(((((-20889.0)*py))+(((-1.0)*x11*x7))+(((-1.0)*x11*x9))+(((-1.0)*x11*(px*px)))+(((518030.381782135)*px)))))+(IKabs(((((-1.0)*x10*x8))+(((-1.0)*x10*x9))+(((518030.381782135)*py))+(((20889.0)*px))+(((-1.0)*x10*(py*py)))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( (((9.610760452939)*pz)) < -1-IKFAST_SINCOS_THRESH || (((9.610760452939)*pz)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x12=IKasin(((9.610760452939)*pz));
j1array[0]=((-3.10640472330353)+x12);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((0.0351879302862606)+(((-1.0)*x12)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x13=py*py;
IkReal x14=px*px;
IkReal x15=((91.51375)*sj1);
IkReal x16=((2599.64071925404)*cj1);
j0eval[0]=(x13+x14);
j0eval[1]=((IKabs((((py*x15))+((py*x16))+(((1899.0)*px))+(((-110.0)*py)))))+(IKabs((((px*x16))+((px*x15))+(((-110.0)*px))+(((-1899.0)*py))))));
j0eval[2]=IKsign(((((25000.0)*x13))+(((25000.0)*x14))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x17=py*py;
IkReal x18=px*px;
IkReal x19=pz*pz;
IkReal x20=((31250000.0)*py);
IkReal x21=((31250000.0)*px);
j0eval[0]=(x17+x18);
j0eval[1]=IKsign(((((275000.0)*x18))+(((275000.0)*x17))));
j0eval[2]=((IKabs(((((-1.0)*x19*x20))+(((-1.0)*x20*(py*py)))+(((-1.0)*x18*x20))+(((518030.381782135)*py))+(((20889.0)*px)))))+(IKabs(((((-1.0)*x19*x21))+(((-20889.0)*py))+(((-1.0)*x17*x21))+(((-1.0)*x21*(px*px)))+(((518030.381782135)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x22=px*px;
IkReal x23=py*py;
IkReal x24=(cj1*py);
IkReal x25=((249852276444376.0)*pz);
IkReal x26=((29.120337995338)*sj1);
IkReal x27=((18978778918714.8)*sj1);
IkReal x28=((24985.2723555824)*sj1);
IkReal x29=(cj1*px);
IkReal x30=(cj1*x23);
IkReal x31=((8579992323041.57)*pz*sj1);
IkReal x32=(cj1*x22);
j0eval[0]=((((-1.0)*x23*x26))+(((-1.0)*x22*x26))+x32+x30);
j0eval[1]=IKsign(((((-1.0)*x23*x28))+(((-1.0)*x22*x28))+(((858.00076769653)*x32))+(((858.00076769653)*x30))));
j0eval[2]=((IKabs(((((651736216858.237)*x29))+((py*x31))+((x24*x25))+(((-1.0)*px*x27)))))+(IKabs((((py*x27))+((px*x31))+(((-651736216858.237)*x24))+((x25*x29))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x33=px*px;
IkReal x34=py*py;
IkReal x35=(x33+x34);
IkReal x36=((((-29.120337995338)*x34))+(((-29.120337995338)*x33)));
IkReal x38 = ((x35*x35)+(x36*x36));
if(IKabs(x38)==0){
continue;
}
IkReal x37=pow(x38,-0.5);
CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(x35),IkReal(x36),IKFAST_ATAN2_MAGTHRESH);
if(!x39.valid){
continue;
}
IkReal gconst0=((-1.0)*(x39.value));
IkReal gconst1=((-1.0)*x35*x37);
IkReal gconst2=(x36*x37);
IkReal x40=px*px;
IkReal x41=py*py;
IkReal x42=j1;
CheckValue<IkReal> x45 = IKatan2WithCheck(IkReal((x40+x41)),IkReal(((((-29.120337995338)*x41))+(((-29.120337995338)*x40)))),IKFAST_ATAN2_MAGTHRESH);
if(!x45.valid){
continue;
}
IkReal x43=x45.value;
IkReal x44=x43;
if(((((x43*x44))+((j1*x42))+((j1*x44))+((x42*x43)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x43*x44))+((j1*x42))+((j1*x44))+((x42*x43)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x46=px*px;
IkReal x47=py*py;
IkReal x48=(x46+x47);
IkReal x49=x36;
IkReal x51 = ((x49*x49)+(x48*x48));
if(IKabs(x51)==0){
continue;
}
IkReal x50=pow(x51,-0.5);
sj1=gconst1;
cj1=gconst2;
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(x48),IkReal(((((-29.120338)*x46))+(((-29.120338)*x47)))),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
j1=((-1.0)*(x52.value));
CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal(x48),IkReal(x49),IKFAST_ATAN2_MAGTHRESH);
if(!x53.valid){
continue;
}
IkReal gconst0=((-1.0)*(x53.value));
IkReal gconst1=((-1.0)*x48*x50);
IkReal gconst2=(x49*x50);
IkReal x54=py*py;
IkReal x55=px*px;
j0eval[0]=(x55+x54);
j0eval[1]=IKsign(((((25000.0)*x55))+(((25000.0)*x54))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x56=gconst2*gconst2;
IkReal x57=gconst1*gconst1;
IkReal x58=px*px;
IkReal x59=py*py;
IkReal x60=((24985.2723555824)*gconst2);
IkReal x61=((65.1737383142284)*gconst1);
IkReal x62=(gconst2*py);
IkReal x63=((858.00076769653)*gconst1);
IkReal x64=((180.679588035432)*gconst1);
IkReal x65=(gconst2*px);
IkReal x66=((2598.10925588897)*x57);
IkReal x67=((3.14075471019153)*x56);
CheckValue<IkReal> x68=IKPowWithIntegerCheck(IKsign((((x59*x63))+((x59*x60))+((x58*x63))+((x58*x60)))),-1);
if(!x68.valid){
continue;
}
CheckValue<IkReal> x69 = IKatan2WithCheck(IkReal((((px*x61))+((x62*x64))+(((2601.25001059916)*py))+(((-1.0)*py*x66))+(((-1.0)*py*x67))+(((1897.88128813004)*x65)))),IkReal(((((-1.0)*px*x67))+(((-1.0)*px*x66))+(((2601.25001059916)*px))+(((-1.0)*py*x61))+((x64*x65))+(((-1897.88128813004)*x62)))),IKFAST_ATAN2_MAGTHRESH);
if(!x69.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x68.value)))+(x69.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x70=IKcos(j0);
IkReal x71=IKsin(j0);
IkReal x72=gconst1*gconst1;
IkReal x73=gconst2*gconst2;
IkReal x74=((0.0343200307078612)*gconst1);
IkReal x75=((0.999410894223298)*gconst2);
IkReal x76=(gconst1*gconst2);
IkReal x77=((0.999410894223298)*gconst1);
IkReal x78=((0.0343200307078612)*gconst2);
IkReal x79=(px*x70);
IkReal x80=(py*x71);
evalcond[0]=((-0.07596)+((px*x71))+(((-1.0)*py*x70)));
evalcond[1]=((-0.0044)+(((0.103985628770161)*gconst2))+(((-1.0)*x80))+(((-1.0)*x79))+(((0.00366055)*gconst1)));
evalcond[2]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-0.0088)*x80))+(((0.000761289186789229)*x76))+(((-1.33996263025e-5)*x73))+(((-0.0088)*x79))+(((-1.0)*(py*py)))+(((-0.0108130109907258)*x72)));
evalcond[3]=((((-0.00365839354884909)*x73))+((x78*x80))+((x78*x79))+(((0.0035687899725682)*x72))+(((-1.0)*x77*x80))+(((0.103798740047151)*x76))+(((-1.0)*x77*x79)));
evalcond[4]=((-0.104050000423967)+(((0.103924370235559)*x72))+((x74*x80))+((x75*x79))+(((-0.00722718352141729)*x76))+((x75*x80))+(((0.000125630188407661)*x73))+((x74*x79)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x81=((2599.64071925404)*gconst2);
IkReal x82=((91.51375)*gconst1);
CheckValue<IkReal> x83=IKPowWithIntegerCheck(IKsign(((((25000.0)*(py*py)))+(((25000.0)*(px*px))))),-1);
if(!x83.valid){
continue;
}
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((((1899.0)*px))+(((-110.0)*py))+((py*x81))+((py*x82)))),IkReal(((((-110.0)*px))+((px*x82))+((px*x81))+(((-1899.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x83.value)))+(x84.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x85=IKcos(j0);
IkReal x86=IKsin(j0);
IkReal x87=gconst1*gconst1;
IkReal x88=gconst2*gconst2;
IkReal x89=((0.0343200307078612)*gconst1);
IkReal x90=((0.999410894223298)*gconst2);
IkReal x91=(gconst1*gconst2);
IkReal x92=((0.999410894223298)*gconst1);
IkReal x93=((0.0343200307078612)*gconst2);
IkReal x94=(px*x85);
IkReal x95=(py*x86);
evalcond[0]=((-0.07596)+(((-1.0)*py*x85))+((px*x86)));
evalcond[1]=((-0.0044)+(((0.103985628770161)*gconst2))+(((-1.0)*x95))+(((-1.0)*x94))+(((0.00366055)*gconst1)));
evalcond[2]=((0.0165769722170283)+(((-0.0108130109907258)*x87))+(((-1.0)*(px*px)))+(((-0.0088)*x95))+(((-0.0088)*x94))+(((0.000761289186789229)*x91))+(((-1.33996263025e-5)*x88))+(((-1.0)*(py*py))));
evalcond[3]=((((0.0035687899725682)*x87))+(((0.103798740047151)*x91))+((x93*x94))+((x93*x95))+(((-1.0)*x92*x95))+(((-1.0)*x92*x94))+(((-0.00365839354884909)*x88)));
evalcond[4]=((-0.104050000423967)+(((0.103924370235559)*x87))+((x89*x95))+((x89*x94))+(((0.000125630188407661)*x88))+((x90*x94))+((x90*x95))+(((-0.00722718352141729)*x91)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x96=px*px;
IkReal x97=py*py;
IkReal x98=(x97+x96);
IkReal x99=((((-29.120337995338)*x96))+(((-29.120337995338)*x97)));
IkReal x101 = ((x99*x99)+(x98*x98));
if(IKabs(x101)==0){
continue;
}
IkReal x100=pow(x101,-0.5);
CheckValue<IkReal> x102 = IKatan2WithCheck(IkReal(x98),IkReal(x99),IKFAST_ATAN2_MAGTHRESH);
if(!x102.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x102.value))));
IkReal gconst4=((1.0)*x100*x98);
IkReal gconst5=((-1.0)*x100*x99);
IkReal x103=px*px;
IkReal x104=py*py;
IkReal x105=j1;
CheckValue<IkReal> x108 = IKatan2WithCheck(IkReal((x104+x103)),IkReal(((((-29.120337995338)*x104))+(((-29.120337995338)*x103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x108.valid){
continue;
}
IkReal x106=x108.value;
IkReal x107=x106;
if((((9.86960440108936)+((x106*x107))+(((-3.14159265358979)*j1))+((j1*x107))+((j1*x105))+((x105*x106))+(((-3.14159265358979)*x107))+(((-3.14159265358979)*x106))+(((-3.14159265358979)*x105)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x106*x107))+(((-3.14159265358979)*j1))+((j1*x107))+((j1*x105))+((x105*x106))+(((-3.14159265358979)*x107))+(((-3.14159265358979)*x106))+(((-3.14159265358979)*x105)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x109=px*px;
IkReal x110=py*py;
IkReal x111=(x110+x109);
IkReal x112=x99;
IkReal x114 = ((x111*x111)+(x112*x112));
if(IKabs(x114)==0){
continue;
}
IkReal x113=pow(x114,-0.5);
sj1=gconst4;
cj1=gconst5;
CheckValue<IkReal> x115 = IKatan2WithCheck(IkReal(x111),IkReal(((((-29.120338)*x110))+(((-29.120338)*x109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x115.valid){
continue;
}
j1=((3.14159265)+(((-1.0)*(x115.value))));
CheckValue<IkReal> x116 = IKatan2WithCheck(IkReal(x111),IkReal(x112),IKFAST_ATAN2_MAGTHRESH);
if(!x116.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x116.value))));
IkReal gconst4=((1.0)*x111*x113);
IkReal gconst5=((-1.0)*x112*x113);
IkReal x117=py*py;
IkReal x118=px*px;
j0eval[0]=(x117+x118);
j0eval[1]=IKsign(((((25000.0)*x117))+(((25000.0)*x118))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x119=px*px;
IkReal x120=py*py;
IkReal x121=gconst5*gconst5;
IkReal x122=gconst4*gconst4;
IkReal x123=((24985.2723555824)*gconst4);
IkReal x124=((65.1737383142284)*gconst5);
IkReal x125=((1897.88128813004)*gconst4);
IkReal x126=((858.00076769653)*gconst5);
IkReal x127=((91.4598387212273)*x121);
IkReal x128=((89.2197493142049)*x122);
IkReal x129=((2594.96850117878)*gconst4*gconst5);
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(((((-1.0)*py*x128))+(((-1.0)*py*x129))+(((-1.0)*px*x125))+((py*x127))+((px*x124)))),IkReal(((((-1.0)*py*x124))+(((-1.0)*px*x129))+(((-1.0)*px*x128))+((py*x125))+((px*x127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
CheckValue<IkReal> x131=IKPowWithIntegerCheck(IKsign(((((-1.0)*x119*x123))+(((-1.0)*x120*x123))+((x120*x126))+((x119*x126)))),-1);
if(!x131.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x130.value)+(((1.5707963267949)*(x131.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x132=IKcos(j0);
IkReal x133=IKsin(j0);
IkReal x134=gconst4*gconst4;
IkReal x135=gconst5*gconst5;
IkReal x136=(gconst4*gconst5);
IkReal x137=((0.999410894223298)*gconst5);
IkReal x138=((0.0343200307078612)*gconst5);
IkReal x139=((0.0343200307078612)*gconst4);
IkReal x140=((0.999410894223298)*gconst4);
IkReal x141=(px*x132);
IkReal x142=(py*x133);
evalcond[0]=((-0.07596)+((px*x133))+(((-1.0)*py*x132)));
evalcond[1]=((-0.0044)+(((-1.0)*x142))+(((-1.0)*x141))+(((0.103985628770161)*gconst5))+(((0.00366055)*gconst4)));
evalcond[2]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-1.33996263025e-5)*x135))+(((-0.0108130109907258)*x134))+(((0.000761289186789229)*x136))+(((-0.0088)*x142))+(((-0.0088)*x141))+(((-1.0)*(py*py))));
evalcond[3]=((((-1.0)*x140*x142))+(((-1.0)*x140*x141))+(((0.0035687899725682)*x134))+(((-0.00365839354884909)*x135))+((x138*x141))+((x138*x142))+(((0.103798740047151)*x136)));
evalcond[4]=((-0.104050000423967)+((x137*x142))+((x137*x141))+(((0.103924370235559)*x134))+(((-0.00722718352141729)*x136))+(((0.000125630188407661)*x135))+((x139*x142))+((x139*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x143=((91.51375)*gconst4);
IkReal x144=((2599.64071925404)*gconst5);
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign(((((25000.0)*(py*py)))+(((25000.0)*(px*px))))),-1);
if(!x145.valid){
continue;
}
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((((1899.0)*px))+(((-110.0)*py))+((py*x143))+((py*x144)))),IkReal(((((-110.0)*px))+((px*x144))+((px*x143))+(((-1899.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x145.value)))+(x146.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x147=IKcos(j0);
IkReal x148=IKsin(j0);
IkReal x149=gconst4*gconst4;
IkReal x150=gconst5*gconst5;
IkReal x151=(gconst4*gconst5);
IkReal x152=((0.999410894223298)*gconst5);
IkReal x153=((0.0343200307078612)*gconst5);
IkReal x154=((0.0343200307078612)*gconst4);
IkReal x155=((0.999410894223298)*gconst4);
IkReal x156=(px*x147);
IkReal x157=(py*x148);
evalcond[0]=((-0.07596)+(((-1.0)*py*x147))+((px*x148)));
evalcond[1]=((-0.0044)+(((-1.0)*x156))+(((-1.0)*x157))+(((0.103985628770161)*gconst5))+(((0.00366055)*gconst4)));
evalcond[2]=((0.0165769722170283)+(((-0.0108130109907258)*x149))+(((-1.0)*(px*px)))+(((0.000761289186789229)*x151))+(((-1.33996263025e-5)*x150))+(((-0.0088)*x156))+(((-0.0088)*x157))+(((-1.0)*(py*py))));
evalcond[3]=(((x153*x157))+((x153*x156))+(((0.0035687899725682)*x149))+(((-1.0)*x155*x157))+(((-1.0)*x155*x156))+(((0.103798740047151)*x151))+(((-0.00365839354884909)*x150)));
evalcond[4]=((-0.104050000423967)+(((-0.00722718352141729)*x151))+(((0.000125630188407661)*x150))+((x152*x156))+((x152*x157))+(((0.103924370235559)*x149))+((x154*x157))+((x154*x156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x158=(py*sj1);
IkReal x159=((25000.0)*py);
IkReal x160=(px*sj1);
IkReal x161=(cj1*px);
IkReal x162=(cj1*py);
IkReal x163=((((-0.999410894223298)*cj1*pz))+(((-0.0343200307078612)*pz*sj1)));
CheckValue<IkReal> x164=IKPowWithIntegerCheck(IKsign((((x159*(((((-0.999410894223298)*x158))+(((0.0343200307078612)*x162))))))+(((25000.0)*px*(((((-0.999410894223298)*x160))+(((0.0343200307078612)*x161)))))))),-1);
if(!x164.valid){
continue;
}
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((((-1897.88128813004)*x160))+(((-1.0)*x159*x163))+(((65.1737383142284)*x161)))),IkReal(((((-65.1737383142284)*x162))+(((1897.88128813004)*x158))+(((-25000.0)*px*x163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x164.value)))+(x165.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x166=IKcos(j0);
IkReal x167=IKsin(j0);
IkReal x168=(py*sj1);
IkReal x169=((0.999410894223298)*px);
IkReal x170=((0.0343200307078612)*px);
IkReal x171=(cj1*py);
IkReal x172=((0.999410894223298)*pz);
IkReal x173=((0.0343200307078612)*pz);
IkReal x174=(px*x166);
IkReal x175=(py*x167);
evalcond[0]=(((x166*((((cj1*x170))+(((-1.0)*sj1*x169))))))+((x167*(((((-0.999410894223298)*x168))+(((0.0343200307078612)*x171))))))+(((-1.0)*cj1*x172))+(((-1.0)*sj1*x173)));
evalcond[1]=((-0.104050000423967)+((x167*(((((0.0343200307078612)*x168))+(((0.999410894223298)*x171))))))+((x166*((((sj1*x170))+((cj1*x169))))))+((cj1*x173))+(((-1.0)*sj1*x172)));
evalcond[2]=((-0.07596)+(((-1.0)*py*x166))+((px*x167)));
evalcond[3]=((-0.0044)+(((-1.0)*x175))+(((-1.0)*x174))+(((0.00366055)*sj1))+(((0.103985628770161)*cj1)));
evalcond[4]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((-0.0088)*x175))+(((-0.0088)*x174))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x176=px*px;
IkReal x177=py*py;
IkReal x178=((0.0165769722170283)+(((-1.0)*x177))+(((-1.0)*x176))+(((-1.0)*(pz*pz))));
IkReal x179=((31250000.0)*x178);
CheckValue<IkReal> x180=IKPowWithIntegerCheck(IKsign(((((275000.0)*x176))+(((275000.0)*x177)))),-1);
if(!x180.valid){
continue;
}
CheckValue<IkReal> x181 = IKatan2WithCheck(IkReal((((py*x179))+(((20889.0)*px)))),IkReal(((((-20889.0)*py))+((px*x179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x181.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x180.value)))+(x181.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x182=IKcos(j0);
IkReal x183=IKsin(j0);
IkReal x184=(py*sj1);
IkReal x185=((0.999410894223298)*px);
IkReal x186=((0.0343200307078612)*px);
IkReal x187=(cj1*py);
IkReal x188=((0.999410894223298)*pz);
IkReal x189=((0.0343200307078612)*pz);
IkReal x190=(px*x182);
IkReal x191=(py*x183);
evalcond[0]=(((x182*((((cj1*x186))+(((-1.0)*sj1*x185))))))+(((-1.0)*sj1*x189))+(((-1.0)*cj1*x188))+((x183*(((((-0.999410894223298)*x184))+(((0.0343200307078612)*x187)))))));
evalcond[1]=((-0.104050000423967)+((x182*((((sj1*x186))+((cj1*x185))))))+((x183*(((((0.999410894223298)*x187))+(((0.0343200307078612)*x184))))))+((cj1*x189))+(((-1.0)*sj1*x188)));
evalcond[2]=((-0.07596)+(((-1.0)*py*x182))+((px*x183)));
evalcond[3]=((-0.0044)+(((-1.0)*x191))+(((-1.0)*x190))+(((0.00366055)*sj1))+(((0.103985628770161)*cj1)));
evalcond[4]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-0.0088)*x190))+(((-0.0088)*x191))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x192=((-0.0044)+(((0.00366055)*sj1))+(((0.103985628770161)*cj1)));
IkReal x193=((-110.0)+(((2599.64071925404)*cj1))+(((91.51375)*sj1)));
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(((((1899.0)*px))+(((25000.0)*py*x192)))),IkReal(((((25000.0)*px*x192))+(((-1899.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195=IKPowWithIntegerCheck(IKsign(((((25000.0)*(py*py)))+(((25000.0)*(px*px))))),-1);
if(!x195.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x194.value)+(((1.5707963267949)*(x195.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x196=IKcos(j0);
IkReal x197=IKsin(j0);
IkReal x198=(py*sj1);
IkReal x199=((0.999410894223298)*px);
IkReal x200=((0.0343200307078612)*px);
IkReal x201=(cj1*py);
IkReal x202=((0.999410894223298)*pz);
IkReal x203=((0.0343200307078612)*pz);
IkReal x204=(px*x196);
IkReal x205=(py*x197);
evalcond[0]=((((-1.0)*cj1*x202))+((x197*(((((-0.999410894223298)*x198))+(((0.0343200307078612)*x201))))))+(((-1.0)*sj1*x203))+((x196*((((cj1*x200))+(((-1.0)*sj1*x199)))))));
evalcond[1]=((-0.104050000423967)+((cj1*x203))+((x196*((((sj1*x200))+((cj1*x199))))))+(((-1.0)*sj1*x202))+((x197*(((((0.999410894223298)*x201))+(((0.0343200307078612)*x198)))))));
evalcond[2]=((-0.07596)+(((-1.0)*py*x196))+((px*x197)));
evalcond[3]=((-0.0044)+(((0.00366055)*sj1))+(((-1.0)*x204))+(((-1.0)*x205))+(((0.103985628770161)*cj1)));
evalcond[4]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-0.0088)*x204))+(((-0.0088)*x205))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x206=px*px;
IkReal x207=pz*pz;
IkReal x208=py*py;
IkReal x209=((31250000.0)*py);
IkReal x210=((31250000.0)*px);
CheckValue<IkReal> x211=IKPowWithIntegerCheck(IKsign(((((275000.0)*x208))+(((275000.0)*x206)))),-1);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212 = IKatan2WithCheck(IkReal(((((-1.0)*x209*(py*py)))+(((-1.0)*x206*x209))+(((-1.0)*x207*x209))+(((518030.381782135)*py))+(((20889.0)*px)))),IkReal(((((-20889.0)*py))+(((-1.0)*x210*(px*px)))+(((-1.0)*x207*x210))+(((518030.381782135)*px))+(((-1.0)*x208*x210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x212.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x211.value)))+(x212.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x213=IKsin(j0);
IkReal x214=IKcos(j0);
evalcond[0]=((-0.07596)+(((-1.0)*py*x214))+((px*x213)));
evalcond[1]=((0.0165769722170283)+(((-1.0)*(px*px)))+(((-0.0088)*px*x214))+(((-0.0088)*py*x213))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x215=(cj0*px);
IkReal x216=(py*sj0);
if( IKabs(((0.00148769712970862)+(((-9.6048110910007)*pz))+(((0.338112984024687)*x216))+(((0.338112984024687)*x215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0422611688004031)+(((0.338112984024687)*pz))+(((9.6048110910007)*x216))+(((9.6048110910007)*x215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00148769712970862)+(((-9.6048110910007)*pz))+(((0.338112984024687)*x216))+(((0.338112984024687)*x215))))+IKsqr(((0.0422611688004031)+(((0.338112984024687)*pz))+(((9.6048110910007)*x216))+(((9.6048110910007)*x215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.00148769712970862)+(((-9.6048110910007)*pz))+(((0.338112984024687)*x216))+(((0.338112984024687)*x215))), ((0.0422611688004031)+(((0.338112984024687)*pz))+(((9.6048110910007)*x216))+(((9.6048110910007)*x215))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x217=IKsin(j1);
IkReal x218=IKcos(j1);
IkReal x219=(py*sj0);
IkReal x220=(cj0*px);
IkReal x221=((0.0343200307078612)*x217);
IkReal x222=((0.0343200307078612)*x218);
IkReal x223=((0.999410894223298)*x217);
IkReal x224=((0.999410894223298)*x218);
evalcond[0]=((((-1.0)*pz))+(((0.00366055)*x218))+(((-0.103985628770161)*x217)));
evalcond[1]=((-0.0044)+(((0.00366055)*x217))+(((-1.0)*x219))+(((0.103985628770161)*x218))+(((-1.0)*x220)));
evalcond[2]=((((-1.0)*x219*x223))+((x219*x222))+((x220*x222))+(((-1.0)*x220*x223))+(((-1.0)*pz*x224))+(((-1.0)*pz*x221)));
evalcond[3]=((-0.104050000423967)+((pz*x222))+((x219*x221))+((x219*x224))+((x220*x224))+((x220*x221))+(((-1.0)*pz*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
j2array[0]=0;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ardop (b3cf42fddc26370d78d152d49aae49c2)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
